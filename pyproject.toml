[project]
name = "docs-monorepo"
version = "0.1.0"
description = "Consolidated LangChain documentation monorepo"
readme = "README.md"
requires-python = ">=3.13.0,<4.0.0"
dependencies = [
    "watchdog>=3.0.0",
    "tqdm>=4.66.0",
    "nbformat>=5.0.0",
    "pyyaml>=6.0.2",
    "nbconvert>=7.16.6",
]


[dependency-groups]
test = [
    "requests",
    "ruamel-yaml>=0.18.15",
    "mypy>=1.17.0,<2.0.0",
    "ruff>=0.13.0,<1.0.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.3",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-socket>=0.7.0",
    "pytest-timeout>=2.3.1",
    "types-pyyaml>=6.0.12.20250516",
    "types-tqdm>=4.67.0.20250516",
    "types-requests>=2.32.4.20250913",
]


[project.scripts]
docs = "pipeline.cli:main"


[project.urls]
repository = "https://github.com/langchain-ai/docs"


[tool.setuptools]
packages = ["pipeline"]


[tool.uv]
package = true
override-dependencies = [
    "pytest-codspeed>=3.1.0,<4.0.0",
]


[tool.pytest.ini_options]
minversion = "8.0"
# -ra: Report all extra test outcomes (passed, skipped, failed, etc.)
# -q: Enable quiet mode for less cluttered output
# -v: Enable verbose output to display detailed test names and statuses
# --durations=5: Show the 10 slowest tests after the run (useful for performance tuning)
addopts = "-ra -q -v --durations=5"
testpaths = [
    "tests",
]
python_files = ["test_*.py"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"


[tool.ruff]
line-length = 88
extend-exclude = [
    "scripts/update_mdx.py",
    "pipeline/tools/notebook/convert.py",
    "src/plugins/middleware_visualization/generate_middleware_diagrams.py"
]


[tool.ruff.lint]
select = [
    "ALL",
]

ignore = [
    "COM812",
    "C901",
    "PLR0915",
    "PLR0912"
]


[tool.ruff.lint.extend-per-file-ignores]

".github/**/*.py" = [
    # Not a package
    "INP001",
]
"pipeline/preprocessors/link_map.py" = [
    # Just contains long links
    "E501",
]

"tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "D104",
    # The below are debatable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001", # OK to access private members in unit tests!
    "W291", # Test files may have trailing whitespace intentionally
    "W293", # Test files may have blank lines with whitespace intentionally
]

"scripts/convert_pip_to_codegroup.py" = [
    "INP001",  # Not a package
]
"scripts/filter_broken_links.py" = [
    "T201",    # print() is expected in a CLI script
    "PLW2901", # Overwriting loop variable is intentional
    "ANN",     # Type annotations not critical for scripts
    "FBT002",  # Boolean defaults are fine for CLI scripts
    "E501",    # Long lines in docstrings are ok
]

"pipeline/tools/partner_pkg_table.py" = [
    "TD002",  # TODO comments are fine
    "TD003",  # TODO comments are fine
    "FIX002", # TODO comments are fine
    "D103",   # Missing docstring in simple function
]


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.mypy]
exclude = [
    "src/plugins/middleware_visualization/generate_middleware_diagrams.py",
]
